// primality test

/*
Given a positive integer,
check if the number is prime or not.
A prime is a natural number greater than 1 that has
no positive divisors other than 1 and itself.
Examples of the first few prime numbers are 
{2, 3, 5, …}
*/

#include <bits/stdc++.h> 
using namespace std;


// this is School Method: i am upset as i am in college how to think of 
// this problem like they think
bool myMethod(int n){
    bool flag = true;
    if(n < 2){
        flag = false;
    }
    for(int i = 2 ; i < n/2 ; i++){
        if(n % i == 0){
            flag = false ;
            break;
        }
    }
    return flag;
}
// time _Complex = o(n)

// optiminzing this approch this school method
bool gfgOptmized(int n){
    bool flag = true;
    if(n < 2){
        flag = false;
    }
    for(int i = 2 ; i <= sqrt(n) ; i++){
        if(n % i == 0){
            flag = false ;
            break;
        }
    }
    return flag;
}

// this is a good approch at first 
// i was confisued but then i understood
/*
Another approach: It is based on the fact that all
primes greater than 3 are of the form 6k ± 1, 
where k is any integer greater than 0.
This is because all integers can be expressed as
(6k + i), where i = -1, 0, 1, 2, 3, or 4. And note
that 2 divides (6k + 0), (6k + 2), and (6k + 4) and 3 
divides (6k + 3). So, a more efficient method is to test
whether n is divisible by 2 or 3, then to check through 
all numbers of the form 6k ± 1 <= vn. This is 3 times
faster than testing all numbers up to vn.
(Source: wikipedia).  

Below is the implementation of the above approach:
*/


bool isPrime(int n){
    if(n == 2 || n == 3){
        return true ;
    }
    
    if(n <= 1 || n %2 == 0 || n%3 == 0){
        return false;
    }
    
    for(int i = 5 ; i* i <= n ; i+=6 ){
        cout << i << " " << n  << endl;
        if(n%i == 0 || n%(i+2)==0){
            return false;
        } 
    }
    return true;
}


int main(){
    
    cout << isPrime(19);
    
    return 0;
}


















