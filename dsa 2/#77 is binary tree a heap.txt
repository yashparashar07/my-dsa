// is binary tree heap
/*
solve
    -is cbt && is maxheap()
        -return true ;
        -else fale;
now
isCBT
    -if root == NULL
        -return true
    if i >. nodecount
        retuurn false
    else{
    left = iscbt(root -> left)
    right = ........

    return (left && right);

    }
then is max order
ismaxorder()
     //leaf node
     return true

     if(right -> NULL)
            return root -> data > root -> left -> data;
     else
     return root -> data > root -> left data &&
            root -> data > root -> right data &&
            ismaxorder(left) &&
            ismaxorder(right);
*/




#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node * left = NULL;
    Node * right = NULL;
};

int countNode(struct Node * root){
    if(root == NULL){
         return 0;
    }
    else{
        return countNode(root -> left) + countNode(root -> right) + 1;
    }
}

bool isCBT(Node * root , int index , int cnt){
    if(root == NULL)
        return true ;
    if(index >= cnt)
        return false;

    else{
        bool left = isCBT(root -> left , 2*index+1 , cnt);
        bool right = isCBT(root -> right , 2*index +2 , cnt);

        return (left && right);
    }
}

bool ismaxorder(Node * root){
    //base case
    if(root -> left == NULL && root -> right == NULL){
        return true ;
    }

    if(root -> right == NULL)
        return (root -> data > root -> left -> data);
    else{
        bool left = ismaxorder(root -> left);
        bool right = ismaxorder(root -> right);
        return left && right &&
               (root -> right -> data < root -> data) &&
               (root -> left -> data < root -> data);
    }
}

bool isHeap(struct Node * root){
    int index = 0;
    int totalcount = countNode(root);
    return (isCBT(root , index , totalcount ) && ismaxorder(root));
}

int main(){


return 0;
}
