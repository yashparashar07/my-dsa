// circular queue
// you have copied it from geeks of geeks 
#include <bits/stdc++.h>
using namespace std;

class Queue{
    int arr;
    int front;
    int rear;
    int size;
    
public:
    Queue(){
        size = 100001;
        arr = new int[size];
        front = rear = -1;
    }
    
    bool enqueue(int data){
        //  to check whether the queue is full or not 
        if((front == 0 && rear == size - 1) || rear = (front - 1)%(size-1) ){
            cout << "queue is full" << endl;
            return false;
        }
        else if(front == -1){
            front = rear = 0;
        }
        
        else if(rear == size -1 && front != 0){
            rear = 0;
        }
        
        else{  // normal flow 
            rear++;
        }
        // push the element inside the queue 
        arr[rear] = value;
        return true;
    }
    
    int dequeue(){
        if(front == -1){ // to check the queue is empty
            cout << "the queue is empty" << endl;
            return -1;
        }
        int ans = arr[front];
        if(front == rear){ // single is present in the queue 
            front = rear = -1;
        }
        
        else if(front == size -1){
            front = 0;  // to maintain the cyclic nature of the circular queue 
        }
        else{ // normal flow
            front ++;
        }w
        return ans;
    }
    
    
    int front(){
        if(qfront == rear){
            return -1;
        }
        else{
            return arr[qfront];
        }
        // time 0(1)
    }
    
    bool isEmpty(){
        if(front == -1){
            cout << "the queue is empty " << endl;
        }
        else {
            return false ;
        }
    }
    
};

int main(){
    
    
        
return 0;
}












