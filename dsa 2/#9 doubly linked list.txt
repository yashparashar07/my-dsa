#include <iostream>
using namespace std;

class Node{
    public:
    int data; 
    Node* next;
    Node* prev;
    
    Node(int d){
        this -> data = d;
        this -> next = next;
        this -> prev = prev;
    }
};

void print(Node * head){
    Node *temp = head;
    for(int i = 0 ; temp!=NULL ; i++){
        cout << temp->data << " ";
        temp = temp->next;
    }cout << endl;
}

int getLength(Node * head){
    Node *temp = head;
    int cnt  = 0;
    for(int i = 0 ; temp!=NULL ; i++){
        cnt++;
        temp = temp->next;
    }
    return cnt;
}

void insertAtHead(Node *&head , Node *&tail , int value ){
    if(head == NULL){
        Node * ptr = new Node(value);
        head = ptr;
        if(tail == NULL)
        tail = head;
    }
    else{
    Node * ptr = new Node(value);
    head -> prev = ptr;
    ptr -> next = head;
    head = ptr;
    }
}

void insertAttail(Node *&tail , Node *&head , int value ){
    if(tail == NULL){
        Node * ptr = new Node(value);
        tail = ptr;
        if(head == NULL)
        head = tail;
    }
    else{
    Node * ptr = new Node(value);
    ptr -> prev = tail;
    tail -> next = ptr;
    tail = ptr;
    }
}

void insertAtPosition(Node *&head , Node *&tail , int position , int value ){
    
    if(position == 1){
        insertAtHead(head , tail , value);
    }
    
    else{
    Node *temp = head;
    for(int i = 0 ; i < position-2 ; i++){
        temp = temp -> next;
    }
    Node * ptr = new Node(value);
    ptr -> next = temp -> next;
    temp -> next -> prev = ptr;
    temp -> next = ptr;
    ptr -> prev = temp;
    }
}

int main(){
    
    // Node * node1 = new Node(4);
    // Node * head = node1;
    // Node * tail = node1;
    Node * head = NULL;
    Node * tail = head;
    insertAtHead(head , tail , 3);
    insertAtHead(head , tail , 2);
    insertAtHead(head , tail , 1);
    insertAttail(tail , head , 4);
    insertAttail(tail , head , 6);
    insertAtPosition(head , tail , 5 , 5);
    print(head);
    cout << "the length is : " << getLength(head) << endl ;
    return 0;
}
