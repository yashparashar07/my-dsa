// merge k sorted linked list
/*

*/

#include <bits/stdc++.h>
using namespace std;

template <class T>
struct Node{
public:
    T data;
    Node * next;

    Node(T data){
    this -> data = data;
    this -> next = NULL;
    }
};

class compare {

public:
    bool operator()(Node <int> * a ,  Node <int> * b){
        return a -> data > b -> data;
    }
};

Node <int> * mergeKLists(vector<Node<int>*> &listArrays){

    priority_queue <Node <int> * , vector<Node <int> * > , compare> minHeap;

    int k = listArrays.size();

    if(k == 0){
        return NULL;
    }

    //step 1;
    for (int i = 0 ; i < k ; i++){
        if(listArrays[i] != NULL){
            minHeap.push(listArrays[i]);
        }
    }

    //step 2;
    Node <int> * head = NULL;
    Node <int> * tail = NULL;

    while(minHeap.size() > 0){
        Node <int>* top = minHeap.top();
        minHeap.pop();

        if(top -> next != NULL){
            minHeap.push(top -> next);
        }

        if(head == NULL){
        //answer list is empty
            head = top;
            tail = top;
        }
        else{
            //insert at linked list
            tail -> next = top;
            tail = top;
        }
    }
    return head;
}

int main(){

    return 0;
}

