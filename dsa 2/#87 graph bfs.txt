#include <bits/stdc++.h>
using namespace std;

void prepareAdjList(unordered_map<int , set<int> > &adjList ,vector <pair <int , int>> edge ){
    for (int i = 0 ; i < edge.size() ; i++){
        int u = edge[i].first;
        int v = edge[i].second;
        
        adjList[u].insert(v);
        adjList[v].insert(u);
    }
}

void bfs(unordered_map<int , set<int> > adjList , unordered_map<int ,bool > visited ,
         vector <int> &ans , int node){
            queue <int> q;
            q.push(node);
            visited[node] = true;
            
            while(!q.empty()){
                int frontNode = q.front();
                q.pop();
                
                //store front Node into ans
                ans.push_back(frontNode);
                
                // traverse all neighbours of frontNode
                for(auto i : adjList[frontNode]){
                    if(!visited[i]){
                        q.push(i);
                        visited[i] = 1;
                    }
                }
            }
         }

vector <int> BFS(int vertex ,vector <pair <int , int>> edge){
    unordered_map<int , set<int> > adjList;
    vector <int> ans;
    unordered_map<int ,bool > visited;
    
    prepareAdjList(adjList , edge);
    
    // traverese all components of a graph
    for(int i = 0 ; i < vertex ; i++){
        if(!visited[i]){
            bfs(adjList , visited , ans , i);
        }
    }
    return ans;
}

void printAdj(unordered_map<int , list<int> > &adjList){
    for(auto i : adjList){
        cout << i.first << " -> ";
        for(auto j : i.second){
            cout << j << " " ;
        }cout << endl;
    }
}

int main(){
    
    
    return 0;
}