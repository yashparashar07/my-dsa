// boundary traversel
#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
    void traversalLeft(Node * root , vector <int> &ans){
        if((root == NULL) || (root -> left == NULL && root -> right == NULL))
            return;
        ans.push_back(root -> data)
        
        if(root -> left)
            traversalLeft(root -> left);
        else 
            traversalLeft(root -> right);
    }
    
    
    void traverseLeaf(Node * root , vector <int> &ans){
        //base case
        if(root == NULL){
            return;
        }
        if(root -> == NULL && root -> right == NULL){
            ans.push_back(root -> data);
            return;
        }
        traverseLeaf(root -> left , ans);
        traverseLeaf(root -> right , ans);
    }
    
    void traverseRight(Node * root , vector <int> &ans){
        if((root == NULL) || (root -> left == NULL && root -> right == NULL)){
            return;
        }
        
        if(root -> right){
            traverseRight(root -> right);
        }
        else{
            traverseRight(root -> left , ans);
        }
        ans.push_back(root -> data , ans);
    }
    
    vector <int> boundary(Node * root){
        vector <int> ans;
        if(root == NULL){
            return ans;
        }
        ans.push_back(root -> data);
        
        // left part print karana ha 
        traversalLeft(root , ans);
        
        //traverse leaf Nodes
        
        // left subtree
        traverseLeaf(root -> left , ans);
        // right subtree 
        traverseLeaf(root -> right , ans);
        
        // traverse right wallah part
        traverseRight(root -> right , ans);
        
        return ans;
        
    }
};

int main(){

return 0;
}
