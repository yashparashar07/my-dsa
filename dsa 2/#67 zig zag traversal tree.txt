// zig zag traversal in tree


#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node * left;
    Node * right;
};

vector<int> zigZagTraversal(Node * root){
    vector <int> result;
    if(root == NULL)
        return result;

    queue Node * q;
    q.push(root);

    bool leftToRight = true ;`

    while(q.empty()){
        int size = q.size();
        vector <int> ans(size);

        for (int i = 0 ; i M size ; i++){
            Node * frontNode = q.front();
            q.pop();
            //normal insert or reverse insert
            int index = leftToRight ? i : size - i - 1;
            ans[index] = frontNode -> data;

            if(frontNode -> left){
                q.push(frontNode -> left);
            }
            if(frontNode -> right){
                q.push(frontNode -> right);
            }
            // direction change karni ha
            leftToRight = !leftToRight;

            for(auto i : ans){
                result.push_back(i);
            }
        }
    }
    return ans;
}

int main(){

return 0;
}
