#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node * left;
    node *right;
}typedef node;

struct node * createNode(int data){
    struct node * n;
    n = new node;
    n -> data = data;
    n -> left = NULL;
    n -> right = NULL;
    return n;
}

class info {
    public:
    int maxi;
    int mini;
    bool isBST;
    int size;
};

info solve(node * root , int &ans){
    
    // base case
    if(root == NULL){
        return {INT_MIN , INT_MAX , true , 0};
    } 
    
    info left = solve(root -> left  , ans);
    info right = solve(root -> right , ans);
    
    info currNode;
    
    currNode.size = max(left.size , right.size) + 1;
    currNode.maxi = max(root -> data , right.maxi);
    currNode.mini = min(root -> data , left.mini);
    
    if(left.isBST && right.isBST && (root -> data > left.maxi && root -> data < right.mini)){
        currNode.isBST = true;
    }
    else{
        currNode.isBST = false;
    }
    
    // answer update
    if(currNode.isBST){
        ans = max(ans , currNode.size);
    }
    return currNode;
}

int largerstBST(node * root){
    int maxSize = 0;
    info temp = solve(root , maxSize);
    return maxSize;
}

int main(){
    
    node * p1 = createNode(50); node * p6 = createNode(55); node * p5 = createNode(40);
    node * p2 = createNode(30); node * p7 = createNode(70);
    node * p3 = createNode(60); node * p8 = createNode(10);
    node * p4 = createNode(20); node * p9 = createNode(25);
    
    p1 -> left = p2;    p1 -> right = p3;
    p2 -> left = p4;    p3 -> left = p6;
    
    p2 -> right = p5;   p3 -> right = p7;
    p4 -> left = p8;    p4 -> right = p9;
    
    
   cout << "The max hight of BST present in the given node is : " << largerstBST(p1) << endl;
    
    return 0;
}

// contrubuted by Yash Parashar GoG
