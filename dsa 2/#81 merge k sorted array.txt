// merge k sorted array
/*
min heap
start
each arr first element into the heap
mini -> top
    -ans array me daal dena
    -INSERt next element of same array into heap if present
*/

#include <bits/stdc++.h>
using namespace std;

class node{
    public :

    int data;
    int i;
    int j;

    node(int data , int row , int col){
        this -> data = data;
        i = row;
        j = col;
    }
};

class compare{
public:
    bool operator()(node * a , node * b){
        return a -> data > b -> data;
    }
};

vector <int> mergeKSortedArrays(vector < vector <int> >&kArrays , int k){

    priority_queue<node * , vector<node*> , compare> minHeap;

    //step 1: saare arrays k first element ko heap me dalo insert

    for(int i = 0 ; i < k ; i++){
        node * tmp = new node (kArrays[i][0] , i , 0);
        minHeap.push(tmp);
    }

    vector <int> ans;

    // step 2 :
    while(minHeap.size() > 0){
        node * tmp = minHeap.top();
        ans.push_back(tmp -> data);
        minHeap.pop();

        int i = tmp -> i;
        int j = tmp -> j;

        if(j+1 < kArrays[i].size()){
            node * next = new node (kArrays[i][j+1] , i , j+1);
            minHeap.push(next);
        }
    }

    return ans;
}

int main(){
    vector<vector<int>> vec{ { 1, 2, 3 },
                         { 4, 5, 6 },
                         { 7, 8, 9, 4 } };

    int k = vec.size();
    vector <int> ans;
    ans = mergeKSortedArrays(vec, k);
    cout << ans.size();
    cout << endl;
    for(int i = 0 ; i < ans.size() ; i++){
        cout << ans[i] << " ";
    }
    return 0;
}

