// binary search tree
#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    struct node *left;
    struct node * right;
}typedef node;

struct node *createNode(int data){
    struct node *n;     // creating a node pointer 
    n = (struct node *)malloc(sizeof(struct node));        // allocating memory in the heap
    n -> data = data;      // setting the data
    n -> left = NULL;      // setting the left and right children to NULL 
    n -> right = NULL;     // setting the left and right children to NULL 
    return n;              // finaly returning the created node
}

struct node *search(struct node * root , int key , int cnt){
    if (root == NULL){
        return NULL;
    }
    if (root -> data == key){
        return root;
    }
    else if(root-> data > key){
        return search(root -> left , key , cnt+1);
    }
    else{
        return search(root -> right , key , cnt+1);
    }
}

int main(){
    // construction the root node - using functions (recomeded)
    node *p = createNode(2);
    node *p1 = createNode(1);
    node *p2 = createNode(4);
     
    // linking the root node with left and right children
    p -> left = p1;
    p -> right = p2;
    
    node * a = search(p , 2 , 0);
    if(a != NULL){
        cout << "founded";
    }
    else{
        cout << "not founded";
    }
    
    return 0; 
}
